#include <sys/types.h>
#include <sys/shm.h>
#include <sys/ipc.h>
#include <stdio.h>
#include <errno.h>
#include <stdlib.h>
#include <fcntl.h>
#include <unistd.h>
#include <sys/sem.h>
#include <string.h>
#include <wait.h>


struct spisok
{
	char name[50];
	int wtime;
	int dtime;
};

struct action
{
	char name[50];
	int count;
};

int find(struct action a, struct spisok *b, int c)
{
	for(int i = 0; i < c; i++)
	{
		if(strcmp(a.name, b[i].name) == 0)
		{
			return i;
		}
	}
}


int main()
{

	struct spisok list[15];
	struct action dirty;

	FILE* fi;
	fi = fopen("washer.txt", "r"); 
	int w = 0;
	while(fscanf(fi, "%s %d\n", list[w].name, &list[w].wtime) == 2)
	{
		w++;
	}
	fclose(fi);

	fi = fopen("scratcher.txt", "r"); 
	w = 0;
	while(fscanf(fi, "%s %d\n", list[w].name, &list[w].dtime) == 2)
	{
		w++;
	}
	fclose(fi);


	int N;
	N = atoi(getenv("TABLE_LIMIT"));

	int semid;
	key_t key;	
	struct sembuf buf[] = {{0, N, 0}, {0, -1, 0}, {0, 1, 0}};
	key = ftok("test.c", 0);
	semid = semget(key, 1, 0666 | IPC_CREAT);
	semop(semid, &buf[0], 1);

	int fd[2];
	pipe(fd);

	int pid;
	pid = fork();
	int a;

	if (pid == 0)
	{
		close(fd[0]);
		fi = fopen("dirty.txt", "r");
		while(fscanf(fi, "%s %d\n", dirty.name, &dirty.count) == 2)
		{
			a = find(dirty, list, w);
			for(int i = 0; i < dirty.count; i++)
			{
				printf("Начал мыть %s\n", list[a].name);
				sleep(list[a].wtime);
            	write(fd[1], &a, 4);
            	semop(semid, &buf[1], 1);
            	printf("Помыл и поставил на стол %s %d\n", list[a].name, semctl(semid, 0, GETVAL, 0));
				
			}

		}
		close(fd[1]);
		exit(0);
	}

	else
	{
		close(fd[1]);
		while(read(fd[0], &a, 4) != 0)
		{
			semop(semid, &buf[2], 1);
			printf("Взял со стола %s %d\n", list[a].name, semctl(semid, 0, GETVAL, 0));
			sleep(list[a].dtime);
			printf("Вытер %s\n", list[a].name);
		}
		close(fd[0]);
	}
	semctl(semid, 0, IPC_RMID, 0);
	return 0;
}
